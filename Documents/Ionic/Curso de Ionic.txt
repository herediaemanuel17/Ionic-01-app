Curso de Ionic

Isntalar todo lo que esta en el Git Hub del profesor
https://gist.github.com/Klerith/1a2801452e4abbb30ff29a1da0cbc057

Para instalar Ionic se debe usar la linea de comando 
$npm install -g @ionic/cli

Para comenzar creamos una carpeta para los proyectos Ionic(Documentos/Ionic)
iniciamos un proyecto en ionic con el comando
$ionic start myApp tabs

Al inicio de la instalacion nos preguntara si queremos usar Angular, React o Vue,
Seleccionamos Angular
cuando nos pregunte si queremos usar plugins de capacitor ponemos Si

Una vez creado el proyecto accedemos a la carpeta con
$cd 01my-app

Iniciamos el proyecto con
$ionic serve
Con el siguiente comando se puede levantar la aplicacion tanto en android como en Ios
$ionic serve --lab
*Una vez iniciado el proyecto, se nos abrira el navegador con la web de la carcaza del proyecto

*****************************************************************************************
GIT HUB
DEsde la consola VSC podemos controlar el repositorio de GitHub.
PAra Commitear primero debemos
git status
git add.
git commit -m "nombre de commit"
giy checkout -- .  *comando para revertir ultimo cambio al ultimo commit realizado*

PAra subir todo al repositorio de GIT
git remote add origin https://github.com/herediaemanuel17/Ionic-01-app.git *para crear repo*
git branch -M master
git push -u origin master
***********************************************************************************************
Crear un Proyecto de angular
Desde linea de comando se ingresa el comando 
$ng new 02base-angular
luego se procede a renombrar la carpeta con un valor 02
se instala boostrap desde la pagina se copia la linea de CSS
Ingreamos a la carpeta del nuevo proyecto
iniciamos el proyecto de angular con 
$ng serve -o
procedemos a pegar el codigo previamente copiado en el index.html
El paso anterior mejora la vista de la pagina

Luegi en app.component.html borramos todo y escribimos hola mundo.
para que no este todo pegado, en el index en Body agregamos una clase llamada container
<body class="container">

****************************
Componentes basicos
Creamos un componente
Con el siguiente comando crea un componente sin modificar los directorios
$ng g c pages/about --dry-run

En realidad lo que se quiere hacer es crear un componente modificando los directorios por lo tnato se 
saca --dry-run
$ng g c pages/about
esto creara la carpeta pages

Creamos otro componente lamada contact
$ng g c pages/contact

Al dirigirnos a la carpeta about.componentes.ts tendremos el 
"selector" *este es el selector que nos permite inyectar el componente en otro lado*
selector: 'app-about'   
en app.component.html colocamos la siguiente linea

<app-about></app-about>
lo mismo con app-contact
<app-contact></app-contact>

PAra que sean visibles desde la pagina web deben estar declarqados en el archivo aap.modules.ts
Tambien crearemos un componente llamado home
**************************************************************
RUTAS DE LAS PAGINAS
Ahora lo que se va a ahcer es crear una pagina para cada componente que se creo con su propia ruta
Se debe crear un manejador de rutas para ello se usara la consola

$ng g m appRouting --dry-run *este comando crara una carpeta nueva y adentro el archivo necesario, 
con el uso del comando --dry-run te dice que va a ahcer el comando pero sin realizar modificacio
$ng g m appRouting --flat creara el archivo de rutas necesario pero sinc rear un nuevo directorio

Dentro del archivo app-routing-module.ts agregamos la siguiente lineas

import { Routes } from '@angular/router';
import { HomeComponent } from './pages/home/home.component';
import { AboutComponent } from './pages/about/about.component';
import { ContactComponent } from './pages/contact/contact.component';

const routes: Routes =[
  {
    path: 'home',
    component: HomeComponent
  },
  {
    path: 'about',
    component: AboutComponent
  },
  {
    path: 'contact',
    component: ContactComponent
  },
  {
    path: '**',
    redirectTo: 'home'
  }
];

Con esto no se veran cambios en la pagina WEb, se debe trabajar sobre la parte del archivo anterior que dice @NgModule

@NgModule({
  declarations: [],
  imports: [
    RouterModule.forRoot( routes )			*se borro la linea y se agregaron estas y a su vez se deben exportar,
  ],
  exports:[
    RouterModule
  ]
})
export class AppRoutingModule { }

PAra que funcione se debe modificar el app.module.ts en l√±a seccion de los imports
imports: [
    BrowserModule,
    AppRoutingModule **linea agregada, verificar qu se importa arriba
  ],

Con esto a pesar que se cambie la ruta en la barra de direcciones seguira mostrando lo mismo, por lo
tanto sera necesario agregar en app.componet.html la linea

<router-outlet></router-outlet> *esto generara una ruta para cada componente
************************************************************************************************************
CREAR UN MENU PARA NAVEGAR ENTRE PANTALLAS

Procedemos a crear el componente Menu
$ng g c components/menu *esto generara una carpeta componen/menu

procedemos a borrar y agregamos una etiqueta para una lsita ordenada con <ul></ul>
de enlaces ref 

<ul class= "list-group">
    <a href=""
        class="list-group-item">
        Ir a la pagina XXX
    </a>
</ul>

En el archivo app.modules.ts deberia estar importado el componente, 
para verlo hay que agregar <app-menu></app-menu> en app.component.html

Se va a modificar el href con un routerlink el cual redirigira a home
<ul class= "list-group">
    <a routerLink="/home"
        class="list-group-item">
        Ir Home
    </a>

    <a routerLink="/home"
        class="list-group-item">
        Ir About
    </a>
</ul>

ESto nos permitira tener la opcion en todas las paginas con un boton de redireccionamiento a home y a about

Ahora en menu.componets.ts debajo de export

rutas = [
    {
      name: 'Home',
      path: '/home'
    },
    {
      name: 'About',
      path: '/about'
    },
    {
      name: 'Contact',
      path: '/contact'
    },
  ];

Para que esto surja efecto se debe modificar el menu.component.ts
y cambiar el codigo a 
<ul class= "list-group">
    <a routerLink="{{ ruta.path }}"
        class="list-group-item"
        *ngFor="let ruta of rutas">
        {{ ruta.name }}
    </a>
</ul>
PAra una mejor estructuracion se deberia cambiar a 
<ul class= "list-group">
    <a [routerLink]="ruta.path" *con el uso de los corchetes enlazo la ruta en "" a la variable dentro de []
        class="list-group-item"
        *ngFor="let ruta of rutas">
        {{ ruta.name }}
    </a>
</ul>
***************************************************************************************
Modulo de Paginas
Normalmente si creamos muchas paginas estaran en app.modules.ts, pero esto no es bueno deberia estar mas limpio
Se pueden organizar los componentes en otro lugar
Procedemos a crear una carpeta dentro de Pages
$ng g m pages/pages --flat se puede ver que se creo la carpeta

Esto permite borrar los componentes About, Home y contac de app.modules.ts
En pages.modules.ts agregamos HomeComponent,AboutComponent y contaccomponent, estoa gregara de manera automatica los imports

@NgModule({
  declarations: [
    HomeComponent,
    AboutComponent,
    ContactComponent
  ],
  exports: [
    HomeComponent,
    AboutComponent,
    ContactComponent
  ],
  imports: [
    CommonModule
  ]
})
export class PagesModule { }

en app.module.ts debemos importar PagesModule de esta forma evito sobrecargar app.modules.ts y sabe donde hay paginas
@Se detuvo el proyectopor una pausa, para renaudar se deve ingresar $ng serve -o@
****************************************************************************************************
Lazy load de PostComponent

se crea la carpeta post en app>pages>posts 
DEsntro de esta carpeta se va a crear un modulo para comprobar todo lo referido a los posteos y una ruta especialziada para mostrar
informacion sobre los posteos

$ng g m pages/posts --routing *este comando creara dos archivos dentro de la carpeta.

los archivos seran similares a los de ruta anteriores pero a diferencia que en vez de decir forRoot dice forChild porque solo hay un root
Ahora se procede a crear un componente, el comando es el mismo solo se cambia la M por una C de component y se saca el --routing

en el ardchuivo post.routing.ts agregamos una ruta pero la ruta se va a agregar de manera que no sea realizar una carga peresosa
osea solo vamos a cargar la pagina que se desea ver y si hay otras paginas que no sonb accedidas abitualmente solo se cargaran al momento de solicitarlas 

Para ello en elarchivo de las rutas app-routing.modules.ts.
Ene ste archivo podriamos nombrar el path de posts y cargar el componente con compoinent:PostComponent, pero no se haria uso del LazyLoad, para ellos se usara el siguiente codigo
{
    path: 'posts',
    //loadChildren: './pages/posts/posts.module#PostModule' * Despues del # pondria el modulo a importar, pero se puede mejorar
    loadChildren: () => import ('./pages/posts/posts.module').then( m => m.PostsModule ) *mejor con carga peresoza
},

Loultimo nos sirve mejor, cargara la informacion pero nos va a responder una "promesa", una vez cargado el modulo lo retornamos con la parte de  .then(m=>m.PostModule)
es lo mismo que la linea anterior pero mejor, en Ionic se ve asi ya que es el nuevo estandar y asi se recomienda para la carga de modulos menos propensa para errores

ahora en el archivo de menu menu.components.ts agrego una ruta
de Posts 
{
      name: 'Posts',
      path: '/posts'
   },

De esta fiorma aparecera en el menu la opcion de posts y yo se que es con carga peresosa porque utilice la funcion de loadchildren 
Ionic todo esto lo hace de forma automatica dandole mas rapidez, solo carga la primera pagina
*********************************************************************************************************************************
25- servicios y Data Exerna (obtenemos datos de un archivo externo en un servidor externo JSON)
En esta oportunidad procedemos a realizar modificaciones en el archivo post.component.html
<h1>Post</h1>
<ul class="list-group">
    <li *ngFor="let post of [1,1,1,1]" class="list-group-item">
        <h2>Titulo</h2>
        <p>
            Hola Mundo
        </p>
    </li>

</ul>
Accedemos al archivo en el link https://jsonplaceholder.typicode.com/posts es un archivo Json para practicar, de esta forma 
consumiremos los datos de ese archivo json.
Lo mejor para compartir estos datos es ponerlo en un lugar llamado "SERVICE" de esta forma compartiremos la info en todos los componentes que lo requieran esto se puede hacer con un 
comando de angular
$ng g s servcices/data --spec=false *el false es para no crear el archivo de prueba sino solamente el servicio.
Este comando en Angular no funciona mas en su reemplazo se utiliza 
$ng g s services/data --skipTests
En Ioonic si funciona
Este comando no modifica el app.module porque si vemos el archivo data.service.ts tiene una propiedad llamada 
providedIn: 'root'

El servicio va a tener la logia para obtener los mensajes en el archivo Json, para realizar una peticion a un servidor HTTP
sera necesario importar un modulo nativo de Angular, para ello sera necesario ir al archivo app.module.ts
import {HttpClientModule} from '@angular/common/http'
y colocamos el HTTP en los import
 imports: [
    BrowserModule,
    AppRoutingModule,
    PagesModule,
    HttpClientModule
  ], *todo lo que diga module va en los imports

Ahora en el data.service.ts importamos el HTTPClient verificar que sea importado de la carpeta agunlar common
export class DataService {

  constructor( private http: HttpClient ) { }
}
Con esto me permite crear un metodo que me permitira obtener los datos

  constructor( private http: HttpClient ) { }

  getPosts() {
    return this.http.get('https://jsonplaceholder.typicode.com/posts')
  } 
PAra usar los datos en mi componente tenemos que ir al post.components.ts e inyectar el servicio que acabamos de crear

export class PostsComponent implements OnInit {

  constructor( private dataService: DataService) { }

  ngOnInit(): void {	*haciendo uso del ngOnInit indica que cargue el componente cuando la pagina se carga por primera vez
    
    this.dataService.getPosts().subscribe( posts => {   *llamamos el metodo que se encuentra en dataService, en teoria llama la inscruccion creada en data.service.ts 
      console.log(posts);
    } );

  }

}
 La instruccion getPosts() nos devuelve un obserbable, el observable trae la informacion que me interesa. 
Con lo echo recientemente al inspeccionar nuestra pagina en Console podemos ver todos los datos obtenidos del archivo Json, pero todabia no se muestran en la pagina 

MOSTRAR LOS POST EN LA WEB
Para mostrar los mensajes sera necesario primero crear un arreglo de mensajes 
edito el archivo posts.component.ts

export class PostsComponent implements OnInit {

  mensajes: any[] = []; *declaro el arreglo de mensajes

  constructor( private dataService: DataService) { }

  ngOnInit() {
    
    this.dataService.getPosts().subscribe( (posts: any[] **indico que los post seran un arreglo)  => {
      console.log(posts );
      this.mensajes= posts; ****se√±alo el arreglo
    } );

  }

}

En el archivo posts.component.html cambiamos la linea del arreglo. Agregando mensaje of mensajes
Esto hara que se muestre un arreglo de 100 mensajes en la pagina, ahora vamos a mostrar los datos del json
<h1>Post</h1>
<ul class="list-group">
    <li *ngFor="let mensaje of mensajes" class="list-group-item">
        <h2>{{mensaje.title}}</h2>   **un header con el titulo del post o mensaje
        <p>
            {{mensaje.data}} **Sera el cuerpo o dato  del post o el mensaje e
        </p>
    </li>

</ul>

en nela rchivo posts.component.ts donde dice 
this.dataService.getPosts().subscribe( (posts: any[])  => {
      console.log(posts );
      this.mensajes= posts;
    } );
nos estamos subscribiendo al componente, cada vez que recarguemos este componente se recargara toda la lista nuevamente,
utilizando mas memoria de manera inecesaria.
Habria que cacncelar la subcripcion cuando no se utiliza, cancelando antes de subcribirse.
Pero angular tiene un pipe que se encarga de eso.
El pipe | async
El codigo quedara en posts.components.ts
export class PostsComponent implements OnInit {

  //mensajes: any[] = [];
  mensajes: any;

  constructor( private dataService: DataService) { }

  ngOnInit() {
    
    this.mensajes = this.dataService.getPosts()
    //.subscribe( (posts: any[])  => {
      //console.log(posts );
      //this.mensajes= posts;
    //} );

  }

}

Y en el HTML post.component.html
<li *ngFor="let mensaje of mensajes | async " class="list-group-item">
De desta forma al apsarse de componente se cancela la subscripcion y cuando vuelvo 
a etrar vuelve a crear la subscripcion

ESto funciona, pero si yo quiciera inspeccionar en consola del navegador
que datos tiene el obketo json importado debo corregir unas cosas en data.service.ts

import { tap } from 'rxjs/operators';

getPosts() {
    //return this.http.get('https://jsonplaceholder.typicode.com/posts')
    return this.http.get('https://jsonplaceholder.typicode.com/posts')
    .pipe(tap( console.log )
      //tap( posts => {
       // console.log(posts);
      //})
    );
  } 
Este pipe es opcional solo sera usado cuando es necesario, 
esto permite ver como agregar operadores rxjs al observable


******************************************************************************************************
Video 27 Qinput Enviar informacion hacia un componente hijo desde un poadre 

Mover la logica de la creacion  de la lista ordenada en el post.component.html a un componente independiente, osea reutilizar todo el codigo html y llamar mas facilmente y el post.component.html sea mas facil de leer

creamos un nuevo componente
$ng g c pages/posts/post --skipTests

Con esto podemos sacar los componentes de la pagina de posts, crear un componente post y mostrar ese componente,
esto sera util cada vez que queremos generar una lista, sera util para crar una ap√±licacion de noticias..
Esto permite enviar informacion de un componente padre a un componente hijo.

Editamos el archivo posts.components.html


<h1>Post</h1>
<ul class="list-group">

    <app-post *ngFor="let mensaje of mensajes | async "
        [mensaje]="mensaje"></app-post>>      **esto indica que le manda al hijo


    <!-- <li *ngFor="let mensaje of mensajes | async " class="list-group-item"> **comentario
        <h2>{{ mensaje.title }}</h2> <p>{{mensaje.body}}</p> 
    </li>-->

</ul>


En el archivo post.component.ts

<li class="list-group-item">
    <h2>{{ mensaje.title }}</h2>
     <p>
         {{mensaje.body}}
     </p>  
     
</li>

PAra que todo esto surta efecto tenemos que agregar el Input ena rchivo post.component.ts
verificar que se importe InPut de @angular/core

export class PostComponent implements OnInit {

  @Input() mensaje;    **la propiedad mensaje va a ser recibida de un  componente exterior, si no se recibe nada seria NULL o nodefine, mensaje tiene el mismo nombre en "mensaje.title" en post.component.html


  constructor() { }

  ngOnInit(): void {
  }

}

dentro del parentesis de Input("aca puedo poner como quiero que sea visto desde afuera ")


*********************************************************************************************************************
28- emitir eventos desde el componente hijo
si yo quiero tocar cada elemento de pos y quiero que me retorne el id
creamos un listener onClic en el archivo post.component donde agregamos el Input

onClick() { //listener creado por nosotros
    console.log( this.mensaje.id );
  }

Ahora en el post.component.html tenemos que agregar ele vento 
<li (click)="onClick()" class="list-group-item">
    <h2>{{ mensaje.title }}</h2>
     <p>
         {{mensaje.body}}
     </p>  
     
</li>

Esto nos devolvera en consola el Id del posteo, permitiendo utilizar eso apra tner mas info o redirigir a algun lado
Pero con esto el evento sale del componente hijo y no del padre. 
PAra que salga el evento del padre hay que hacer lo siguiente en el archivo post.component.ts la linea

@Output() clickPost = new EventEmitter();

pero antes, dentro del import agregar EventEmitter
import { Component, Input, OnInit, Output, EventEmitter} from '@angular/core';

En el posts.component.html agrego un nuevo evento para ser escuchado 

<h1>Post</h1>
<ul class="list-group">

    <app-post *ngFor="let mensaje of mensajes | async "
        [mensaje]="mensaje" (clickPost)="escuchaClick( $event )"></app-post>> 
    <!-- <li *ngFor="let mensaje of mensajes | async " class="list-group-item">
        <h2>{{ mensaje.title }}</h2> <p>{{mensaje.body}}</p> 
    </li>-->
</ul> 

Esta linea la agregamos en posts.component.ts
escuchaClick( id: number  ) {
    console.log("click en: ", id);
  }

en post.component.ts 
onClick() { //listener creado por nosotros
    //console.log( this.mensaje.id ); cambio para enviar el evento al padre
    this.clickPost.emit(1); //lo que esta entre parentesis es lo que recibe el padre en su evento. mas alla de que nosotros declaramos que enviabamos un num
  }
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Termina repaso de angular
SECCION 4



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PRIMRA APLICACION DE IONIC


iniciamos un proyect ionic con 
$ionic start component balnk
Borramos la carpeta Home para iniciarla desde cero.

Creamos una pagina de inicio
$ionic g page pages/inicio --spec=false

Ionic creara automaticamente las rutasen app-routing.modules.ts
en esta oportunidad eliminamos la pagina home y redirigimos a la pagina inicio

const routes: Routes = [
 
  {
    path: 'inicio',		*nombre del path osea el nombre del link de la pagina
    loadChildren: () => import('./pages/inicio/inicio.module').then( m => m.InicioPageModule)
  },
  {
    path: '',
    redirectTo: 'inicio',
    pathMatch: 'full'
  },
  
];


******************************************

Navegacion entre paginas

creo dos paginas mas alert y action-sheet
con el comando 
$ionic g page pages/"nombre del componente o pagina" --spec=false

Para navegar entre las aginas incorporamos un boton de ionic dentro de ion-content
<ion-content>
  <ion-button routerLink="/alert">
    Alert 
  </ion-button>
</ion-content>


pero con esto no tenemos una forma de regresar osea la flechita en ios si arrastramos la pantalla hacia la derecha volvemos hacia atras
Lo mismo para crear el boton a la pagina action-sheet
********************************************************
Boton para regresar 

si visualziamos el HTML de action-sheet por ejemplo, 
en la barra donde aparece el nombre osea el tolbar, se puede dividir en 3 secciones
star, parte media sin nombre y end.
hay veces que puede aparecer debajo de tolbar 
slot="end o start" con esto le decimos a ionic en que punto posicionar un elemento
<ion-header>
  <ion-toolbar>
    <ion-title>action-sheet</ion-title>
  </ion-toolbar>
</ion-header>



Si lo editamos quedara asi 
<ion-header>
  <ion-toolbar>

    <ion-buttons slot="start">

      <ion-back-button
      defaultHref="/" *de esta forma le decimos que si no hay pagina anterior me lelve al inicio y cambiandole el texto
      text="Regresar" texto en el boton
      color="primary" color por defecto
      mode="ios">>    modo apariencia ios con "md" es tipo android

      </ion-back-button>

    </ion-buttons>

    <ion-title>action-sheet</ion-title>
  </ion-toolbar>
</ion-header>

Hacer lo mismo en la pagina de alert

PAra ver esto se puede acceder a la documentacion de Ionic en el buscador poner 
ion-back-button

**************************************************************************************************
36 Modulo de Videos - Header
Replicar botton Back

generamos un modulo llamado componets
$ionic g module componets
esto creara una carpeta componts

ahora crear un componets dentro de la carpeta components,
$ionic g component components/header *en lo posible sin ela rchivo de  prueba
declaramos y exportamos el HeaderComponent

Lo que vamos a ahcer es el doc action-sheet html
borramos el ion-header y agregamos la ruta del header componet osea
<app-header></app-module>

el ion-header hay que llevarlo al header-component, para que tome el componente de ionic, hay que imprtarlo e el header
en el header-component ts en imports como IonicModule

en action-sheet.modules.ts importamos ComponentsModule

Esto deberia mostrar la misma felcha, y si se realizan las impotaciones
necesarias en Alert, tendremos el mismo boton en todas las paginas

PAra que el titulo de la pagina varie por cad pagina, sino se repetiria el mismo
se debe importar desde el header.componen.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss'],
})
export class HeaderComponent  {
  @Input() titulo:string = '';
} 
 en el header.component-html agregamos
    <ion-title class="ion-text-capitalize">  * con capitalizarlo le decimos que lo ponga prolijo
      {{titulo}}
     </ion-title>

En action-sheet.html
<app-header titulo="action Sheet"></app-header>

**********************************************************************************************************************************************
37 ion-list
procedemos a incorporal la etiquea de ion-list, y dentro tendremos una lista de Items
<ion-content>
  <ion-list>
  <ion-item *ngFor="let c of componentes">
    <ion-icon name="american-football" slot="start"></ion-icon>   *el slot="start" permite que el icono no este pegado a la palabra
    {{ c.name }}
  </ion-item>
  </ion-list>
</ion-content>

Para ello en el inicio.pages.ts incorporamos un componente lista, pero previamente creamos una interface componente

interface Componente {
  icon: string;
  name: string;
  redirectTo: string;
}

luego declaramos la lista de compoonentes
   componentes: Componente[] =[
    {
      icon: 'american-futbol',
      name: 'Action Sheet',
      redirectTo: '/action-sheet',
    }
  ]; //defino un array de componentes, de la interfaz componente

Otra forma de colocar el icono y que no sea directamente en el HYML puede ser
 <ion-list>
  <ion-item *ngFor="let c of componentes"
	[routerLink]="c.redirectTo"	*Esto para ser redirigido a la pagina de action-sheet
	detail>				*con esto agrego la misma flechita que se ve en iphone 
    <ion-icon [name]="c.icon" slot="start" color="primary"></ion-icon>
    {{ c.name }}
  </ion-item>
  </ion-list>

****************************************************************************************************************
SECCION 5